/**
* the \@param notation indicates an input paramater for a function. For example
* @param {string} foobar - indicates the function should accept a string
* and it should be called foobar, for example function(foobar){}
* \@return is the value that should be returned
*/
/**
* Write a function called `uselessFunction`.
* It should accept no arguments.
* It should return the null value.
* @return {null} - 'useless'.
*/
//your code here
function uselessFunction() {
  return null;
}
//end your code

var bar = 'not a function';
var barType = typeof bar;
/**
* Assign the above variable 'bar' to an anonymous function with the following
* properites.
* @param {float[]} doubleArray - an array of floating point numbers.
* The function should multiply every number in the array by 2 (this should
* change the content of the array).
* @return {boolean} - true if the operation was sucessful, false otherwise.
* This should return false if any value in the array cannot be doubled.
*/
//your code here
bar = function (float) {
  var check = true;
  for (var i = 0; i < float.length; i++)
  {
    if (typeof (float[i]) !== 'number')
    {
      check = false;
    } 
    else
    {
      float[i] = 2 * float[i];
    }
  }
  return check;
}
//end your code
/**
* Creates a new GitLog
* @class
* @property {string} hash - the hash of the commit
* @property {Date} date - the date of the commit as a JS Date object
* @property {string} message - the commit message
*/

function GitLog(hash, date, message) {
  this.hash = hash;
  this.date = date;
  this.message = message;
}
/**
* Create a function called parseGit to parse Git commit logs
* The logs will be generated by the following command
* git log --pretty=format:"%h %ad \"%s\"" --date=rfc
* The result looks like this
* 3782618 Wed, 7 Jan 2015 21:42:26 -0800 "Initial commit"
* |hash | |             date           | |   message    |
* There will always be a space between the hash and date and between the date
* and the first " of the commit message.
*
* You will covert these into GitLog objects with the following properties:
*
*
* @param {array.<string>} logArray - an array of Git commit messages of the
* above
* format.
* @return {array.<GitLog>} - return an array GitLog instances
*/
//your code here
function parseGit(logArray)
{
  var gitLogArray = new GitLog();
  var tempHash;
  var tempStr;
  var tempDate;
  var tempDateObj;
  var tempMsg;
  for(var i = 0; i < logArray.length; i++)
    {
      tempHash = logArray[i].split(' ', 1);
      var ind = tempHash[0].length;
      tempStr = logArray[i].slice(ind + 1);
      tempDate = tempStr.split(' "', 1);
      tempDateObj = new Date(tempDate);
      tempMsg = tempStr.slice((tempDate[0].length + 2), -1);
      gitLogArray[i] = new GitLog(tempHash, tempDate, tempMsg);
    }
  return gitLogArray;
}
/*
var logs = ['3782618 Wed, 7 Jan 2015 21:42:26 -0800 "Initial commit"','c314332 Wed, 7 Jan 2015 22:02:38 -0800 "Add empty bio.md"'];
var myHash = logs[0].split(' ', 1);
console.log(myHash[0].length);

var result = parseGit(logs);
console.log(result[0].hash);
console.log(result[0].date);
console.log(result[0].message);
*/